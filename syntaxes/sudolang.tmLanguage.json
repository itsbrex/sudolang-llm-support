{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "SudoLang",
  "patterns": [
    { "include": "#markdown-headers" },
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#strings" },
    { "include": "#functions" },
    { "include": "#variables" },
    { "include": "#operators" },
    { "include": "#commands" },
    { "include": "#interfaces" },
    { "include": "#expressions" }
  ],
  "repository": {
    "markdown-headers": {
      "patterns": [
        {
          "name": "markup.heading.sudolang",
          "match": "^(#{1,6})\\s+(.*)$",
          "captures": {
            "1": { "name": "punctuation.definition.heading.sudolang" },
            "2": { "name": "entity.name.section.sudolang" }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.sudolang",
          "match": "\\b(ask|case|concat|constraint|constraints|contains|convert|continue|count|default|defaults|describe|else|emit|empty|error|escape|every|exists|explain|filter|find|first|flatMap|flatten|for each|function|fn|groupBy|if|in|includes|interface|interpolate|intersection|join|list|log|loop|map|match|max|merge|min|normalize|orderBy|otherwise|pick|pluck|range|replace|require|requirements|reverse|revise|select|skip|slice|some|sort|sortBy|split|take|takeLast|takeLatest|takeUntil|takeWhile|throw|transpile|trim|union|unique|warn|warnings|where|while|wrap|zip)\\b"
        },
        {
          "name": "keyword.commands.sudolang",
          "match": "\\b/[a-zA-Z0-9]+\\b"
        },
        {
          "name": "variable.language.sudolang",
          "match": "\\$\\w+"
        },
        {
          "name": "keyword.operator.sudolang",
          "match": "&&|\\|\\||!|\\bxor\\b|==|!=|>|<|>=|<=|=|\\+=|-=|\\*=|/=|\\+|-|\\*|/|%|\\^|\\bcap\\b|\\bcup\\b|\\|>|\\?|:"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.sudolang",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "variable.other.sudolang",
              "match": "\\$[a-zA-Z_][a-zA-Z0-9_]*"
            },
            {
              "name": "constant.character.escape.sudolang",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.template.sudolang",
          "begin": "`",
          "end": "`",
          "patterns": [
            {
              "name": "variable.other.sudolang",
              "match": "\\$[a-zA-Z_][a-zA-Z0-9_]*"
            },
            {
              "name": "constant.character.escape.sudolang",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.sudolang",
          "match": "(//).*$\\n?",
          "captures": {
            "1": { "name": "punctuation.definition.comment.sudolang" }
          }
        },
        {
          "name": "comment.block.sudolang",
          "begin": "/\\*",
          "end": "\\*/",
          "captures": {
            "0": { "name": "punctuation.definition.comment.sudolang" }
          }
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.sudolang",
          "begin": "\\b(function|fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(\\()?",
          "beginCaptures": {
            "1": { "name": "storage.type.function.sudolang" },
            "2": { "name": "entity.name.function.sudolang" },
            "3": { "name": "punctuation.definition.parameters.begin.sudolang" }
          },
          "end": "(?<=\\})|(?<=\\))|$",
          "patterns": [
            { "include": "#function-parameters" },
            { "include": "#function-body" }
          ]
        }
      ]
    },
    "function-parameters": {
      "begin": "\\(",
      "end": "\\)",
      "patterns": [
        { "include": "#expressions" }
      ]
    },
    "function-body": {
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        { "include": "#comments" },
        { "include": "#expressions" }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.sudolang",
          "match": "\\$[a-zA-Z_][a-zA-Z0-9_]*"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.sudolang",
          "match": "\\+|-|\\*|/|%|\\^|&&|\\|\\||!|<|>|<=|>=|==|!=|\\|>|=|\\+=|-=|\\*=|/=|\\bcap\\b|\\bcup\\b|\\bxor\\b"
        }
      ]
    },
    "commands": {
      "patterns": [
        {
          "name": "keyword.other.command.sudolang",
          "match": "/[a-zA-Z_][a-zA-Z0-9_]*"
        }
      ]
    },
    "interfaces": {
      "patterns": [
        {
          "begin": "\\b([A-Z][a-zA-Z0-9]*)\\s*\\{",
          "beginCaptures": {
            "1": { "name": "entity.name.type.interface.sudolang" }
          },
          "end": "\\}",
          "patterns": [
            { "include": "#expressions" },
            {
              "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b",
              "name": "variable.other.property.sudolang"
            }
          ]
        }
      ]
    },
    "expressions": {
      "patterns": [
        { "include": "#comments" },
        { "include": "#strings" },
        {
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(=|\\+=|-=|\\*=|/=)\\s*",
          "captures": {
            "1": { "name": "variable.other.assignment.sudolang" },
            "2": { "name": "keyword.operator.sudolang" }
          }
        },
        {
          "begin": "\\{",
          "end": "\\}",
          "name": "meta.object.sudolang",
          "patterns": [
            { "include": "#expressions" }
          ]
        },
        {
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*:",
          "captures": {
            "1": { "name": "variable.other.property.sudolang" }
          }
        },
        {
          "match": "\\b\\d+(\\.\\d+)?\\b",
          "name": "constant.numeric.sudolang"
        },
        {
          "match": "\\b(true|false)\\b",
          "name": "constant.language.boolean.sudolang"
        },
        {
          "match": "\\bnull\\b",
          "name": "constant.language.null.sudolang"
        }
      ]
    }
  },
  "scopeName": "source.sudo"
}
