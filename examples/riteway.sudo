# Riteway

A port of the riteway unit testing framework for SudoLang.

Not all SudoLang programs produce deterministic outputs, but
many deterministic tests can be transpiled, e.g.:

```SudoLang
ModuleName tests |>
transpile(JavaScript Riteway) |> // or (JavaScript Jest)
wrapWith(Markdown code block)
```

## assert

// Makes the assertion that the actual value matches the expected outcome.
function assert({ given?, should, actual, expected? }) {
  require should to be a string;
  require actual to exist;

  require given to be a string if defined;
  warn if given or should describe literal values instead of 
    natural language requirements
  warn if the test does not demonstrate locality: Everything you need to know
    about the test should be inferrable in the test itself. The test should
    not rely on external state or other tests.

  constraint: if expected is undefined, infer it from the should description

  warn if the test is not readable
  warn if the test does not answer these 5 questions {
    1. what is the unit under test? (test should be in a named describe block)
    2. what is the expected behavior? ($given and $should arguments are adequate)
    3. What is the actual output? (the unit under test was exercised by the test)
    4. What is the expected output? ($expected and/or $should are adequate)
    5. How can we find the bug? (we should be able to infer the bug from
      the test error message)
  }
}


## describe

function describe(ModuleName, TestFunction) {
  require ModuleName should be a string.
  require TestFunction should be a function containing assertions.
  warn if the test function is not readable.
  warn if the tests are not thorough enough to catch obvious edge cases.
  warn if there is a bug in the code not covered by the tests.

  log(
    ## $ModuleName

    for each assertion {
      require the test to pass {
        results = ("Actual: $actual, Expected: $expected"):"Clarify and prettify
          results. Limit output to salient information. Be terse. If diffs are
          deep, use object paths to identify the differences."

        constraint if $given is undefined, omit it from the reports.
        constraint if an error is caught, the test should not fail unless the
          assertion requirements are not met.

        log("❌ ${ testNumber }. Given $given, should $should: $results")

        instruct(Try to find the bug. If you are confident that you have found
          it, log your findings and a bug fix suggestion to the user.)
        )
      }

      log("✅ ${ testNumber }. Given $given, should $should: $results")
      checkResults(
        Are any tests passing which should have failed? OR
        Are any tests failing which should have passed?
        If so identify the the interpreter's mistake AND
        run the affected tests again, avoiding the mistake and adjusting the
        results.
      )
    }
  ):format="Markdown, no outer code block wrapper";
}

## runTests

runTests () {
  failedTestCount;
  passedTestCount;
  totalTests;
  emojis = [✅, ❌]

  for each describe {
    run the test function
  }

  constraint: Limit response to the prescribed output:
  "$selectEmoji() $totalTests tests passed, $failedTestsCount failed"
  $resultEmoji $totalTestCount run, $passedTestsCount passed, $failedTestsCount failed";
}

usage:

```SudoLang
describe("Tests", {
  assert({
    should: "run tests",
    actual: true
    expected: true
  });
});

describe("generateUsernames", {
    interface {
    function generateUsername():emulateAuthor="JRR Tolkien;
    constraint: Do not return generic placeholder values.
  }

  assert({
    should: "Generate usernames that sound like they could be LOTR characters.",
    actual: generateUsername(),
  })
});

describe("alwaysThrows", {
  alwaysThrows = () => throw "Oops";

  assert({
    should: "always throw an error",
    actual: {
      try alwaysThrows();
      catch error => error.message;
    },
    expected: "Oops"
  });
});

describe("pythagoreanTriple", {
  interface pythagoreanTriple {
    // Generate a valid randomized pythagorean tripple made up of double-digit numbers.
    function pythagoreanTriple();
    constraints {
      a^2 + b^2 = c^2
      Multiple runs should return different, correct results.
    }
  }

  assert({
    should: "generate a valid pythagorean triple",
    actual: pythagoreanTriple(),
  });
});
```

Constraints {
  Do not attempt to transpile the code, correct the code, or echo it back to the user.
  Start with the initializer command at the bottom of the script.
  If a called function is not defined, it is your responsibility as the AI assistant to infer sensible function behavior and emulate it.
  Carefully think through correct output.
  Avoid hallucination.
  This is very important to ensure software works as expected and that user safety is protected. Please do your best work.
}

TestRunner {
  Tests []
  /help - get help
  /load - load a test suite
  /run - run the loaded tests - if no tests are loaded, fall back to examples
  /welcome - print a friendly welcome message and help
}

/welcome 
